<?php

/*

Solarized Light.tet

[color_theme]

background_color="fffdf6e3"
completion_background_color="ffede6d3"
completion_selected_color="ffddd6b3"
completion_existing_color="21dfdfdf"
completion_scroll_color="ff657b83"
completion_font_color="ff444444"
caret_color="ff657b83"
caret_background_color="ff000000"
line_number_color="ff2b91af"
text_color="ff333333"
text_selected_color="ff333333"
keyword_color="ff859900"
base_type_color="ff073642"
engine_type_color="ffcb4b16"
function_color="ff268bd2"
member_variable_color="ff268bd2"
comment_color="ff93a1a1"
string_color="ff2aa198"
number_color="ffd33682"
symbol_color="ff333333"
selection_color="ffdad3c1"
brace_mismatch_color="ffff3333"
current_line_color="fff5eedc"
line_length_guideline_color="ffe5decc"
mark_color="30ff3232"
breakpoint_color="33cccc66"
code_folding_color="ff808080"
word_highlighted_color="ffeee8d5"
search_result_color="fff7c399"
search_result_border_color="00000000"
gdscript/function_definition_color="ff268bd2"
gdscript/node_path_color="ffcb4b16"



; Solarized Light by Ethan Schoonover (modified by aramisgithub)
; Generated by base16-godot

[color_theme]

background_color="fffdf6e3"
base_type_color="ff2aa198"
brace_mismatch_color="ffdc322f"
breakpoint_color="30b58900"
caret_background_color="ff586e75"
caret_color="ff586e75"
code_folding_color="ff657b83"
comment_color="ff839496"
completion_background_color="ffeee8d5"
completion_existing_color="40839496"
completion_font_color="ff657b83"
completion_scroll_color="ff657b83"
completion_selected_color="9093a1a1"
current_line_color="25839496"
engine_type_color="ffb58900"
function_color="ff268bd2"
gdscript/function_definition_color="ff268bd2"
gdscript/node_path_color="ffd33682"
keyword_color="ff6c71c4"
line_length_guideline_color="ffeee8d5"
line_number_color="ff839496"
mark_color="40ff5555"
member_variable_color="ffdc322f"
number_color="ffcb4b16"
safe_line_number_color="ff657b83"
search_result_border_color="30b58900"
search_result_color="30b58900"
selection_color="9093a1a1"
string_color="ff859900"
symbol_color="ff586e75"
text_color="ff586e75"
text_selected_color="ff586e75"
word_highlighted_color="25586e75"

*/

$htmlFile = fopen("./language-presets/example.html", "r") or die("Unable to open file!");
$htmlContents = htmlspecialchars(fread($htmlFile, filesize("./language-presets/example.html")));
fclose($htmlFile);

$cssFile = fopen("./language-presets/example.css", "r") or die("Unable to open file!");
$cssContents = trim(fread($cssFile, filesize("./language-presets/example.css")));
fclose($cssFile);

$gdscriptFile = fopen("./language-presets/example.gd", "r") or die("Unable to open file!");
$gdscriptContents = trim(fread($gdscriptFile, filesize("./language-presets/example.gd")));
fclose($gdscriptFile);

$csharpFile = fopen("./language-presets/example.cs", "r") or die("Unable to open file!");
$csharpContents = trim(fread($csharpFile, filesize("./language-presets/example.gd")));
fclose($csharpFile);

function get_string_between($string, $start, $end){
    $string = ' ' . $string;
    $ini = strpos($string, $start);
    if ($ini == 0) return '';
    $ini += strlen($start);
    $len = strpos($string, $end, $ini) - $ini;
    return substr($string, $ini, $len);
}


$themesPath = "./themes/";

$godotContents = loadGodotFile("Solarized-Light.tet");
$colors = parseGodotFile($godotContents);

function loadGodotFile($fileName) {
    global $themesPath;

    $filePath = $themesPath . $fileName;

    $godotFile = fopen($filePath, "r") or die("Unable to open Godot file!");
    $godotContents = trim(fread($godotFile, filesize($filePath)));
    fclose($godotFile);

    return $godotContents;
}

function parseGodotFile($contents) {
    $result = [];

    $contents = trim(str_replace("[color_theme]", "", $contents));

    $arr = preg_split('/\s+/', $contents);
    // $arr[1] = '2';
    // print_r($arr);

    $length = count($arr);

    for($i = 0; $i < $length - 1; ++$i) {
        $name = strtok($arr[$i], '=');
        $hexColor = "#" . substr(get_string_between($arr[$i], '"', '"'), 2);

        $result[$name] = $hexColor;
    }

    // print_r($result);
    return $result;
    
}

?>

<!DOCTYPE html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Code Theme Builder</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="./css/prism_solarized_light.css">
    <link rel="stylesheet" href="./css/style.css">
    <script src="./js/prism.js"></script>
    <!-- <link rel="stylesheet" href="./css/bulma.min.css"> -->

</head>

<body>
    <div id="app">
        <h1>App</h1>

        <div class="wrapper">
            <div class="code-container">
                <pre class="language-gdscript"><code><?= $csharpContents ?></code></pre>
                <pre class="language-gdscript"><code><?= $gdscriptContents ?></code></pre>
                <pre class="language-html"><code><?= $htmlContents ?></code></pre>
                <pre class="language-css"><code><?= $cssContents ?></code></pre>
            </div>

            <div class="colors-container">

             <!--    <color-selector :colorname="'--background-color'" :initialcolor="'#2d2d2d'"></color-selector>

                <color-selector :colorname="'--comment-color'" :initialcolor="'#999999'"></color-selector>

                <color-selector :colorname="'--puncuation-color'" :initialcolor="'#cccccc'"></color-selector>

                <color-selector :colorname="'--tag-color'" :initialcolor="'#e2777a'"></color-selector>

                <color-selector :colorname="'--function-name-color'" :initialcolor="'#6196cc'"></color-selector> -->

                <?php foreach($colors as $key=>$value): ?>

                    <color-selector :colorname="'<?= $key ?>'" :initialcolor="'<?= $value ?>'"></color-selector>

                <?php endforeach; ?>

            </div>
        </div>
    </div>

    <script src="./dist/app.js"></script>
</body>

</html>